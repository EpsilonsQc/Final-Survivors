//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Runtime/Input Actions/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovements"",
            ""id"": ""cc006efb-10c6-402f-8927-af5eaad1433e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1587e883-8fe1-4bba-b22d-76d03eb9393b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""a9b52f42-8515-4fe4-9bcc-9010927f834e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tbag"",
                    ""type"": ""Button"",
                    ""id"": ""f92ef052-4d81-42f8-8eb0-2b5a251bc21d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5ba676b0-10d5-44c2-ab36-141015ae3fa0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""842a7742-dabd-46a2-8354-296961f5b8a4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b3ce0343-b628-4b73-875d-c7c2c4e498a9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd9f4800-2eb0-49dd-bea2-048d56f7f1c4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""958b13e6-4b94-406e-88ec-75dcefaa0a9b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0976c579-797c-41da-ae81-81454133e1dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1661b72-ac77-4954-a761-b3e20235d31c"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tbag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""30dec473-b3f0-4bea-b19f-a4bf45f458b4"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""a7cdd12a-1c14-4cf1-904e-8a0b5e84222c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""902482a1-904a-4c79-bbe8-1193734389bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TimeWarp"",
                    ""type"": ""Button"",
                    ""id"": ""8e5babf2-3710-491a-9cdb-7958be3a90c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""3de69f72-7cbd-4d1e-9967-3310167f5d3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""43e0e8bf-532e-43ea-99ab-3b38499db00a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba0ca127-b29a-44eb-9b4a-b566e8a3002c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2329bfb-0f1e-42a0-bd43-0cede9ad9472"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5626d1c9-af9f-42da-92f2-618e3f065379"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TimeWarp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""475e63c8-bbf4-442c-ba93-1f72dc90bd97"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac399434-c58e-4f18-a0c0-7fa2632b8764"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AudioOptions"",
            ""id"": ""5aedd57b-0237-425e-a34a-f9dc8252de8a"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""be0f184b-285a-4732-8491-0a5985875689"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""21edaf98-03cd-4a7a-abfe-bbbd19385982"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""e323e6bd-0cb9-480f-9da7-6e5f85920a07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""5296167e-0d90-4004-93d9-886905726d0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeUp"",
                    ""type"": ""Button"",
                    ""id"": ""b68bc717-f08e-46db-8586-bd93f5cc5509"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""342e66b3-cdc1-46c9-b575-b455fdbcbe98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9736cee1-91d1-43dc-b959-8f21dc808d0b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eba0147d-618c-4639-b189-15ff3bff407d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20d21183-9b5c-4a8c-a9b4-44d7423daef0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e036e0d3-d970-473a-8b3e-0151a0c447ea"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5725185a-2604-49b8-a3d6-a3b35753884e"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ef48c6b-b3d5-41a2-a11f-b792b32cb252"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""8442d384-612e-4221-9c97-cb3d9cbfa1fc"",
            ""actions"": [
                {
                    ""name"": ""Toggle Pause Menu"",
                    ""type"": ""Button"",
                    ""id"": ""9df8b29d-c7cf-417b-ac2a-8d097aa3ef71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Cheats Menu"",
                    ""type"": ""Button"",
                    ""id"": ""afdf9a04-b9b1-4c4a-92d5-fe72df87ddd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip Intro"",
                    ""type"": ""Button"",
                    ""id"": ""9f646591-25e1-4566-83c2-212447678493"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Video"",
                    ""type"": ""Button"",
                    ""id"": ""6b53f143-fff4-4b45-9397-369607c8ca0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Video"",
                    ""type"": ""Button"",
                    ""id"": ""2882615e-5ce5-4a58-b43f-7a09f0664144"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afa3fe1b-b34a-4388-9cac-9dcca6058358"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7575913d-b412-4ca4-b32a-cd3054e302f4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip Intro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06a19cf9-2e0e-4fa3-a50e-1e92b27acbe0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Video"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""339c3d83-fee9-4c73-9e51-facf9895e232"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Video"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fd8f63f-7aff-4be3-bef7-1368b1010230"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Cheats Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovements
        m_PlayerMovements = asset.FindActionMap("PlayerMovements", throwIfNotFound: true);
        m_PlayerMovements_Move = m_PlayerMovements.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovements_Dash = m_PlayerMovements.FindAction("Dash", throwIfNotFound: true);
        m_PlayerMovements_Tbag = m_PlayerMovements.FindAction("Tbag", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Shoot = m_PlayerActions.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerActions_Melee = m_PlayerActions.FindAction("Melee", throwIfNotFound: true);
        m_PlayerActions_TimeWarp = m_PlayerActions.FindAction("TimeWarp", throwIfNotFound: true);
        m_PlayerActions_MouseCursor = m_PlayerActions.FindAction("Mouse Cursor", throwIfNotFound: true);
        m_PlayerActions_ChangeWeapon = m_PlayerActions.FindAction("ChangeWeapon", throwIfNotFound: true);
        // AudioOptions
        m_AudioOptions = asset.FindActionMap("AudioOptions", throwIfNotFound: true);
        m_AudioOptions_Play = m_AudioOptions.FindAction("Play", throwIfNotFound: true);
        m_AudioOptions_Pause = m_AudioOptions.FindAction("Pause", throwIfNotFound: true);
        m_AudioOptions_Previous = m_AudioOptions.FindAction("Previous", throwIfNotFound: true);
        m_AudioOptions_Next = m_AudioOptions.FindAction("Next", throwIfNotFound: true);
        m_AudioOptions_VolumeUp = m_AudioOptions.FindAction("VolumeUp", throwIfNotFound: true);
        m_AudioOptions_VolumeDown = m_AudioOptions.FindAction("VolumeDown", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_TogglePauseMenu = m_UI.FindAction("Toggle Pause Menu", throwIfNotFound: true);
        m_UI_ToggleCheatsMenu = m_UI.FindAction("Toggle Cheats Menu", throwIfNotFound: true);
        m_UI_SkipIntro = m_UI.FindAction("Skip Intro", throwIfNotFound: true);
        m_UI_PreviousVideo = m_UI.FindAction("Previous Video", throwIfNotFound: true);
        m_UI_NextVideo = m_UI.FindAction("Next Video", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovements
    private readonly InputActionMap m_PlayerMovements;
    private List<IPlayerMovementsActions> m_PlayerMovementsActionsCallbackInterfaces = new List<IPlayerMovementsActions>();
    private readonly InputAction m_PlayerMovements_Move;
    private readonly InputAction m_PlayerMovements_Dash;
    private readonly InputAction m_PlayerMovements_Tbag;
    public struct PlayerMovementsActions
    {
        private @UserInput m_Wrapper;
        public PlayerMovementsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovements_Move;
        public InputAction @Dash => m_Wrapper.m_PlayerMovements_Dash;
        public InputAction @Tbag => m_Wrapper.m_PlayerMovements_Tbag;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Tbag.started += instance.OnTbag;
            @Tbag.performed += instance.OnTbag;
            @Tbag.canceled += instance.OnTbag;
        }

        private void UnregisterCallbacks(IPlayerMovementsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Tbag.started -= instance.OnTbag;
            @Tbag.performed -= instance.OnTbag;
            @Tbag.canceled -= instance.OnTbag;
        }

        public void RemoveCallbacks(IPlayerMovementsActions instance)
        {
            if (m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementsActions @PlayerMovements => new PlayerMovementsActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Shoot;
    private readonly InputAction m_PlayerActions_Melee;
    private readonly InputAction m_PlayerActions_TimeWarp;
    private readonly InputAction m_PlayerActions_MouseCursor;
    private readonly InputAction m_PlayerActions_ChangeWeapon;
    public struct PlayerActionsActions
    {
        private @UserInput m_Wrapper;
        public PlayerActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_PlayerActions_Shoot;
        public InputAction @Melee => m_Wrapper.m_PlayerActions_Melee;
        public InputAction @TimeWarp => m_Wrapper.m_PlayerActions_TimeWarp;
        public InputAction @MouseCursor => m_Wrapper.m_PlayerActions_MouseCursor;
        public InputAction @ChangeWeapon => m_Wrapper.m_PlayerActions_ChangeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Melee.started += instance.OnMelee;
            @Melee.performed += instance.OnMelee;
            @Melee.canceled += instance.OnMelee;
            @TimeWarp.started += instance.OnTimeWarp;
            @TimeWarp.performed += instance.OnTimeWarp;
            @TimeWarp.canceled += instance.OnTimeWarp;
            @MouseCursor.started += instance.OnMouseCursor;
            @MouseCursor.performed += instance.OnMouseCursor;
            @MouseCursor.canceled += instance.OnMouseCursor;
            @ChangeWeapon.started += instance.OnChangeWeapon;
            @ChangeWeapon.performed += instance.OnChangeWeapon;
            @ChangeWeapon.canceled += instance.OnChangeWeapon;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Melee.started -= instance.OnMelee;
            @Melee.performed -= instance.OnMelee;
            @Melee.canceled -= instance.OnMelee;
            @TimeWarp.started -= instance.OnTimeWarp;
            @TimeWarp.performed -= instance.OnTimeWarp;
            @TimeWarp.canceled -= instance.OnTimeWarp;
            @MouseCursor.started -= instance.OnMouseCursor;
            @MouseCursor.performed -= instance.OnMouseCursor;
            @MouseCursor.canceled -= instance.OnMouseCursor;
            @ChangeWeapon.started -= instance.OnChangeWeapon;
            @ChangeWeapon.performed -= instance.OnChangeWeapon;
            @ChangeWeapon.canceled -= instance.OnChangeWeapon;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // AudioOptions
    private readonly InputActionMap m_AudioOptions;
    private List<IAudioOptionsActions> m_AudioOptionsActionsCallbackInterfaces = new List<IAudioOptionsActions>();
    private readonly InputAction m_AudioOptions_Play;
    private readonly InputAction m_AudioOptions_Pause;
    private readonly InputAction m_AudioOptions_Previous;
    private readonly InputAction m_AudioOptions_Next;
    private readonly InputAction m_AudioOptions_VolumeUp;
    private readonly InputAction m_AudioOptions_VolumeDown;
    public struct AudioOptionsActions
    {
        private @UserInput m_Wrapper;
        public AudioOptionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_AudioOptions_Play;
        public InputAction @Pause => m_Wrapper.m_AudioOptions_Pause;
        public InputAction @Previous => m_Wrapper.m_AudioOptions_Previous;
        public InputAction @Next => m_Wrapper.m_AudioOptions_Next;
        public InputAction @VolumeUp => m_Wrapper.m_AudioOptions_VolumeUp;
        public InputAction @VolumeDown => m_Wrapper.m_AudioOptions_VolumeDown;
        public InputActionMap Get() { return m_Wrapper.m_AudioOptions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AudioOptionsActions set) { return set.Get(); }
        public void AddCallbacks(IAudioOptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Add(instance);
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @VolumeUp.started += instance.OnVolumeUp;
            @VolumeUp.performed += instance.OnVolumeUp;
            @VolumeUp.canceled += instance.OnVolumeUp;
            @VolumeDown.started += instance.OnVolumeDown;
            @VolumeDown.performed += instance.OnVolumeDown;
            @VolumeDown.canceled += instance.OnVolumeDown;
        }

        private void UnregisterCallbacks(IAudioOptionsActions instance)
        {
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @VolumeUp.started -= instance.OnVolumeUp;
            @VolumeUp.performed -= instance.OnVolumeUp;
            @VolumeUp.canceled -= instance.OnVolumeUp;
            @VolumeDown.started -= instance.OnVolumeDown;
            @VolumeDown.performed -= instance.OnVolumeDown;
            @VolumeDown.canceled -= instance.OnVolumeDown;
        }

        public void RemoveCallbacks(IAudioOptionsActions instance)
        {
            if (m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAudioOptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_AudioOptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AudioOptionsActions @AudioOptions => new AudioOptionsActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_TogglePauseMenu;
    private readonly InputAction m_UI_ToggleCheatsMenu;
    private readonly InputAction m_UI_SkipIntro;
    private readonly InputAction m_UI_PreviousVideo;
    private readonly InputAction m_UI_NextVideo;
    public struct UIActions
    {
        private @UserInput m_Wrapper;
        public UIActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePauseMenu => m_Wrapper.m_UI_TogglePauseMenu;
        public InputAction @ToggleCheatsMenu => m_Wrapper.m_UI_ToggleCheatsMenu;
        public InputAction @SkipIntro => m_Wrapper.m_UI_SkipIntro;
        public InputAction @PreviousVideo => m_Wrapper.m_UI_PreviousVideo;
        public InputAction @NextVideo => m_Wrapper.m_UI_NextVideo;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @TogglePauseMenu.started += instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed += instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled += instance.OnTogglePauseMenu;
            @ToggleCheatsMenu.started += instance.OnToggleCheatsMenu;
            @ToggleCheatsMenu.performed += instance.OnToggleCheatsMenu;
            @ToggleCheatsMenu.canceled += instance.OnToggleCheatsMenu;
            @SkipIntro.started += instance.OnSkipIntro;
            @SkipIntro.performed += instance.OnSkipIntro;
            @SkipIntro.canceled += instance.OnSkipIntro;
            @PreviousVideo.started += instance.OnPreviousVideo;
            @PreviousVideo.performed += instance.OnPreviousVideo;
            @PreviousVideo.canceled += instance.OnPreviousVideo;
            @NextVideo.started += instance.OnNextVideo;
            @NextVideo.performed += instance.OnNextVideo;
            @NextVideo.canceled += instance.OnNextVideo;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @TogglePauseMenu.started -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled -= instance.OnTogglePauseMenu;
            @ToggleCheatsMenu.started -= instance.OnToggleCheatsMenu;
            @ToggleCheatsMenu.performed -= instance.OnToggleCheatsMenu;
            @ToggleCheatsMenu.canceled -= instance.OnToggleCheatsMenu;
            @SkipIntro.started -= instance.OnSkipIntro;
            @SkipIntro.performed -= instance.OnSkipIntro;
            @SkipIntro.canceled -= instance.OnSkipIntro;
            @PreviousVideo.started -= instance.OnPreviousVideo;
            @PreviousVideo.performed -= instance.OnPreviousVideo;
            @PreviousVideo.canceled -= instance.OnPreviousVideo;
            @NextVideo.started -= instance.OnNextVideo;
            @NextVideo.performed -= instance.OnNextVideo;
            @NextVideo.canceled -= instance.OnNextVideo;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerMovementsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnTbag(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
        void OnTimeWarp(InputAction.CallbackContext context);
        void OnMouseCursor(InputAction.CallbackContext context);
        void OnChangeWeapon(InputAction.CallbackContext context);
    }
    public interface IAudioOptionsActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnVolumeUp(InputAction.CallbackContext context);
        void OnVolumeDown(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnTogglePauseMenu(InputAction.CallbackContext context);
        void OnToggleCheatsMenu(InputAction.CallbackContext context);
        void OnSkipIntro(InputAction.CallbackContext context);
        void OnPreviousVideo(InputAction.CallbackContext context);
        void OnNextVideo(InputAction.CallbackContext context);
    }
}
